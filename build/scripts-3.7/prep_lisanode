#!/home/stefan/anaconda3/bin/python
import os
import logging
import shutil
import subprocess
import glob

import ldc.io.yml as ymlio
from ldc.utils.logging import init_logger, close_logger


def remove_relative_import(dotpy, custom_prefix="my-"):
    with open(dotpy, "r", encoding='utf-8') as fid:
        lines = fid.readlines()
    new_lines = []
    for l in lines:
        if len(l)>10 and l[0:4]=='from':
            spl = l.split(" ")
            m = spl[1]
            if m[0:2]=="..":
                nm = m.replace(".." ,"lisanode.")
            elif m[0]==".":
                nm = m.replace("." , custom_prefix)
            else:
                nm = m
            new_lines.append(" ".join([spl[0], nm]+spl[2:]))
        else:
            new_lines.append(l)
    with open(dotpy, 'w', encoding='utf-8') as fid:
        fid.writelines(new_lines)
    if os.path.basename(dotpy)=="__init__.py":
        with open(dotpy, 'w', encoding='utf-8') as fid:
            fid.writelines([])

def update_lisanode_config(lisanode_config, pipe_config):
    """ Update acceleration noise parameter in config.py
    """
    d = ymlio.load_config(pipe_config)
    if not 'accnoise' in d.keys():
        return
    with open(lisanode_config, "r", encoding='utf-8') as fid:
        lines = fid.readlines()
    new_lines = []
    found = False
    for l in lines:
        if len(l)>22 and l[0:22]=="LISA_ACC_NOISE_A_LEVEL":
            new_lines.append("LISA_ACC_NOISE_A_LEVEL = %s\n"%(d["accnoise"]))
            found = True
        else:
            new_lines.append(l)
    if not found:
        new_lines.append("LISA_ACC_NOISE_A_LEVEL = %s\n"%(d["accnoise"]))
    with open(lisanode_config, 'w', encoding='utf-8') as fid:
        fid.writelines(new_lines)
            
            
if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--log', type=str, default="", help="Log file")
    parser.add_argument('-o', '--output', default="./",
                        help= "Output path")
    parser.add_argument('-c', '--config', default="lisanode_config",
                        help= "LISANode config file")
    parser.add_argument('-g', '--graph', default="graph.py",
                        help= "LISANode main graph file")
    parser.add_argument('--pipe-config', default="",
                        help= "Pipeline config file")

    
    args = parser.parse_args()
    logger = init_logger(args.log)		

    # copy lisa graph in output repo
    import lisanode
    input_directory = os.path.join(os.path.dirname(lisanode.__file__), "lisa")
    logger.info("getting lisa instrument model from %s"%input_directory)

    run_dir = os.path.dirname(args.output)
    #run_dir = os.path.join(directory, 'mylisanode')
    custom_prefix = "my_"

    logger.info("will copy %s in %s"%(input_directory, run_dir))
    dotpys = glob.glob(os.path.join(input_directory, "*.py"))
    dotpys.remove(os.path.join(input_directory, "__init__.py"))
    try:
        os.mkdir(run_dir)
    except:
        pass
    for f in dotpys:
        shutil.copy(f, os.path.join(run_dir, custom_prefix+os.path.basename(f)))

    # copy config
    dest_config = os.path.join(run_dir, custom_prefix+"config.py")
    shutil.copy(args.config, dest_config)
    if args.pipe_config:
        update_lisanode_config(dest_config, args.pipe_config)
    
    # copy graph
    shutil.copy(args.graph, args.output)
    #for f in args.input:
    #    shutil.copy(f, run_dir)

    # replace relative import with custom prefix
    dotpys = glob.glob(os.path.join(run_dir, "*.py"))
    for f in dotpys:
        logger.info("fix import in %s"%f)
        remove_relative_import(f, custom_prefix=custom_prefix)

