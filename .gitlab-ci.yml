image: python:3.8-slim

variables:
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_COMMIT_REF_NAME
  IMAGE_BUILD_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  IMAGE_RELEASE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  IMAGE_LATEST_TAG: $CI_REGISTRY_IMAGE:latest
  MY_PROJECT_NAME: ldc
  ORAS_URL: oras://$CI_REGISTRY_IMAGE/$MY_PROJECT_NAME:$CI_COMMIT_REF_SLUG

stages:
  - test
  - build
  - deploy
  - release

pylint:
  stage: test
  script:
  - python3 -c 'import sys; f = open("/usr/local/lib/python3.8/site-packages/_manylinux.py", "w"); f.write("manylinux1_compatible = True"); f.close()'
  - pip install --upgrade astroid
  - pip install pylint
  - python pylint-monitor

doctest:
  stage: test
  script:
  - apt-get update
  - apt-get -y install gcc g++ libfftw3-dev libgsl-dev 
  - pip install -r requirements.txt
  - python setup.py install
  - python test/make_test.py

docker:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - apk add --no-cache git
    - git clone --single-branch --branch ldc-pipeline https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.in2p3.fr/j2b.bayle/LISANode.git
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$IMAGE_TAG" .
    - docker push $IMAGE_BUILD_TAG
  only:
  - master

snaketest:
  image: docker:latest
  services:
    - docker:dind
  stage: deploy
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IMAGE_BUILD_TAG
    - docker run $IMAGE_BUILD_TAG /bin/bash -c "cd /codes/LDC/data_generation/test; snakemake -j 1"
  only:
  - master

singularity:
  stage: deploy
  image:
    name: quay.io/singularity/singularity:v3.4.0
    entrypoint: [""]
  script:
    - singularity build --docker-username ${SINGULARITY_DOCKER_USERNAME} --docker-password ${SINGULARITY_DOCKER_PASSWORD} ldcpipe.sif ldcpipe.def
    - echo "${ORAS_URL}"
    - singularity push --docker-username "${CI_REGISTRY_USER}" --docker-password "${CI_REGISTRY_PASSWORD}" ldcpipe.sif "${ORAS_URL}"
  artifacts:
    paths:
    - ldcpipe.sif
  only:
  - master

pages:
  stage: deploy
  before_script:
  - apt-get update
  - apt-get -y install gcc g++ 
  - pip install -U sphinx
  - pip install -U sphinx_rtd_theme
  - pip install mkdocs-material
  script:
  - cd doc
  - sphinx-build -b html . ../public
  - cd ../data_generation/doc
  - mkdocs build
  - mv site ../../public/data_generation
  artifacts:
    paths:
    - public
  only:
  - master

# If it's a tag on master branch
# Then TAG and PUSH the new release to the registry
release:
    stage: release
    script:
        - docker pull $IMAGE_BUILD_TAG
        - docker tag $IMAGE_BUILD_TAG $IMAGE_RELEASE_TAG
        - docker tag $IMAGE_BUILD_TAG $IMAGE_LATEST_TAG
        - docker push $IMAGE_RELEASE_TAG
        - docker push $IMAGE_LATEST_TAG 
    only:
    - tags
    - master
