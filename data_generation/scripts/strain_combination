#!/usr/bin/env python3
import numpy as np
import re
import os
import sys
from scipy.interpolate import make_interp_spline

import ldc.io.yml as ymlio
from ldc.lisa.projection import ProjectedStrain, from_file, to_file
from LDCPipeline.tools import init_logger, close_logger

if __name__ == "__main__":

    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--in', dest='hdf5', nargs="+", help= "Path to hdf5 sources file(s)")
    parser.add_argument('-c', '--config', required=True, help= "Path to configuration file")
    parser.add_argument('-o', '--out', default="./strain.hdf5", help= "Output strain")
    parser.add_argument('-l', '--log', type=str, default="", help="Log file")

    
    args = parser.parse_args()
    logger = init_logger(args.log)		

    ### load instrument config : TODO use a better format
    cfg = ymlio.load_config(args.config)
    t_max = cfg["t_max"]
    t_min = cfg["t_min"]
    dt = cfg["dt"]
    t1 = np.arange(t_min, t_max, dt)
    order = cfg['interp_order']

    logger.info("Merging %s strains"%(len(args.hdf5)))
    
    merged = np.zeros((len(t1), 6))
    lst = []
    links = []
    for hdf5file in args.hdf5:
        if os.path.getsize(hdf5file)==0:
            continue

        yArm, source_names, links, t_min_, t_max_, dt_ = from_file(hdf5file)
        if dt==dt_:
            merged = merged + yArm
        else:
            logger.info("Interpolating from %s: original dt=%d, target dt=%d"%(hdf5file, dt_, dt))
            t2 = np.arange(t_min_, t_max_, dt_)
            for ilink in range(yArm.shape[1]):
                bs = make_interp_spline(t2, yArm[:,ilink], k=order)
                merged[:,ilink] += bs(t1)
                
        lst += source_names


    to_file(args.out, merged, lst, links, t_min, t_max, dt)
    logger.info("Saved to disk")

