#!/usr/bin/env python3
import os
import logging
import shutil
import subprocess
import yaml

import ldc.io.yml as ymlio
from ldc.utils.logging import init_logger, close_logger

def build_config(config_template, gwstrain,  config_dest, noise=True):
    """ Build a dedicated config file for lisanode
    """
    d = ymlio.load_config(config_template)
    d["noise"] = 1 if noise else 0
    d["gwstrain_file"] = os.path.abspath(gwstrain) # full path
    yaml.dump(d, open(config_dest, "w"))
    
description = """ Run lisanode from the ouput directory, with a dedicated
configuration file"""
    
if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-l', '--log', type=str, default="", help="Log file")
    parser.add_argument('-i', '--input-gw', required=True, type=str, 
                        help= "Input GW strain file in h5 format")
    parser.add_argument('-o', '--output', default="./",
                        help= "Output directory")
    parser.add_argument('-c', '--config', default="config.yml",
                        help= "Configuration file template")
    parser.add_argument('-g', '--graph', default="graph.py",
                        help= "LISANode main graph file, only basename used")
    parser.add_argument('-n', '--node', default="LISAWithGWAndTDI",
                        help= "LISANode main node name")
    parser.add_argument('-f', '--flags', default="",
                        help= "LISANode flags")
    parser.add_argument('--duration', default=1000,
                        help= "duration in seconds")
    parser.add_argument('--devtool7', action="store_true", 
                        help= "Activate devtool7 (required if default gcc<4.9)")
    parser.add_argument('--h5', action="store_true", 
                        help= "Use hdf5 output")
    parser.add_argument('-O', '--optimization', choices=[0, 1, 2, 3], default=0, 
                        help= "level of compiler optimizations")
    
    args = parser.parse_args()
    logger = init_logger(args.log)		

    output_dir = os.path.dirname(args.output)

    config = os.path.join(output_dir,
                          os.path.basename(args.input_gw).replace(".h5", ".yml"))
    noise = True if 'sum' in args.input_gw else False
    build_config(args.config, args.input_gw,  config, noise=noise)
    
    
    if args.devtool7:
        prefix = "source /opt/rh/devtoolset-7/enable &&"
    else:
        prefix = ""
    if args.h5:
        ofmt = "-f hdf5"
    else:
        ofmt = "-f text"
        args.output = output_dir

    # test, run from rundir
    config = os.path.basename(config)
    args.output = os.path.basename(args.output)
    args.graph = os.path.basename(args.graph)
        
    o = open(args.log, "a")
    rargs = [prefix + " lisanode run -O %d %s --flags='%s' --config=%s %s:%s -d %s -o %s"%(args.optimization, ofmt, args.flags, config,  args.graph, args.node, str(args.duration), args.output)]
    p = subprocess.Popen(rargs, stdout=o, stderr=o,
                         shell=True, cwd=output_dir, 
                         executable='/bin/bash')
    p.communicate()[0]
    o.close()

